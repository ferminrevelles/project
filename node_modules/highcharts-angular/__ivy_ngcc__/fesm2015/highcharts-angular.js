import { Component, ElementRef, EventEmitter, Input, Output, NgZone, NgModule } from '@angular/core';
import 'highcharts';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
class HighchartsChartComponent {
    /**
     * @param {?} el
     * @param {?} _zone
     */
    constructor(el, _zone // #75
    ) {
        this.el = el;
        this._zone = _zone;
        this.updateChange = new EventEmitter(true);
        this.chartInstance = new EventEmitter();
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set options(val) {
        this.optionsValue = val;
        this.wrappedUpdateOrCreateChart();
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set update(val) {
        if (val) {
            this.wrappedUpdateOrCreateChart();
            this.updateChange.emit(false); // clear the flag after update
        }
    }
    /**
     * @return {?}
     */
    wrappedUpdateOrCreateChart() {
        // #75
        if (this.runOutsideAngular) {
            this._zone.runOutsideAngular(() => {
                this.updateOrCreateChart();
            });
        }
        else {
            this.updateOrCreateChart();
        }
    }
    /**
     * @return {?}
     */
    updateOrCreateChart() {
        if (this.chart && this.chart.update) {
            this.chart.update(this.optionsValue, true, this.oneToOne || false);
        }
        else {
            this.chart = (/** @type {?} */ (this.Highcharts))[this.constructorType || 'chart'](this.el.nativeElement, this.optionsValue, this.callbackFunction || null);
            // emit chart instance on init
            this.chartInstance.emit(this.chart);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // #44
        if (this.chart) { // #56
            // #56
            this.chart.destroy();
            this.chart = null;
        }
    }
}
HighchartsChartComponent.ɵfac = function HighchartsChartComponent_Factory(t) { return new (t || HighchartsChartComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
HighchartsChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: HighchartsChartComponent, selectors: [["highcharts-chart"]], inputs: { options: "options", update: "update", Highcharts: "Highcharts", constructorType: "constructorType", callbackFunction: "callbackFunction", oneToOne: "oneToOne", runOutsideAngular: "runOutsideAngular" }, outputs: { updateChange: "updateChange", chartInstance: "chartInstance" }, decls: 0, vars: 0, template: function HighchartsChartComponent_Template(rf, ctx) { }, encapsulation: 2 });
/** @nocollapse */
HighchartsChartComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: NgZone, },
];
HighchartsChartComponent.propDecorators = {
    "Highcharts": [{ type: Input },],
    "constructorType": [{ type: Input },],
    "callbackFunction": [{ type: Input },],
    "oneToOne": [{ type: Input },],
    "runOutsideAngular": [{ type: Input },],
    "options": [{ type: Input },],
    "update": [{ type: Input },],
    "updateChange": [{ type: Output },],
    "chartInstance": [{ type: Output },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HighchartsChartComponent, [{
        type: Component,
        args: [{
                selector: 'highcharts-chart',
                template: ''
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { updateChange: [{
            type: Output
        }], chartInstance: [{
            type: Output
        }], options: [{
            type: Input
        }], update: [{
            type: Input
        }], Highcharts: [{
            type: Input
        }], constructorType: [{
            type: Input
        }], callbackFunction: [{
            type: Input
        }], oneToOne: [{
            type: Input
        }], runOutsideAngular: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class HighchartsChartModule {
}
HighchartsChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HighchartsChartModule });
HighchartsChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HighchartsChartModule_Factory(t) { return new (t || HighchartsChartModule)(); } });
/** @nocollapse */
HighchartsChartModule.ctorParameters = () => [];
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HighchartsChartModule, { declarations: [HighchartsChartComponent], exports: [HighchartsChartComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HighchartsChartModule, [{
        type: NgModule,
        args: [{
                declarations: [HighchartsChartComponent],
                exports: [HighchartsChartComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { HighchartsChartModule, HighchartsChartComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9tZWRpYS9lcm1hZXN0cm94L0JBQ0tVUC9DYXJwZXRhIERvY2VudGUvTWFzdGVyIERlc2Fycm9sbG8gZGUgU2l0aW9zIHkgQVBQIFdlYi9EZXNhcnJvbGxvIGZyb250LWVuZCAoQXZhbnphZG8pL1BFQzUvRW50cmVnYXIvRWplcmNpY2lvNGIvVU9DSm9iL25vZGVfbW9kdWxlcy9oaWdoY2hhcnRzLWFuZ3VsYXIvZmVzbTIwMTUvaGlnaGNoYXJ0cy1hbmd1bGFyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQU9BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBb0VDLHNnQkFNQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBZ0JBOzs7Ozs7Ozs7Q0FPRCwySkFNQzs7Ozs7Ozs7OzswQkFFOEMiLCJmaWxlIjoiaGlnaGNoYXJ0cy1hbmd1bGFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIE5nWm9uZSwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAnaGlnaGNoYXJ0cyc7XG5cbi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcclxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xyXG4gKi9cclxuY2xhc3MgSGlnaGNoYXJ0c0NoYXJ0Q29tcG9uZW50IHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHs/fSBlbFxyXG4gICAgICogQHBhcmFtIHs/fSBfem9uZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihlbCwgX3pvbmUgLy8gIzc1XHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLmVsID0gZWw7XHJcbiAgICAgICAgdGhpcy5fem9uZSA9IF96b25lO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcih0cnVlKTtcclxuICAgICAgICB0aGlzLmNoYXJ0SW5zdGFuY2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7P30gdmFsXHJcbiAgICAgKiBAcmV0dXJuIHs/fVxyXG4gICAgICovXHJcbiAgICBzZXQgb3B0aW9ucyh2YWwpIHtcclxuICAgICAgICB0aGlzLm9wdGlvbnNWYWx1ZSA9IHZhbDtcclxuICAgICAgICB0aGlzLndyYXBwZWRVcGRhdGVPckNyZWF0ZUNoYXJ0KCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7P30gdmFsXHJcbiAgICAgKiBAcmV0dXJuIHs/fVxyXG4gICAgICovXHJcbiAgICBzZXQgdXBkYXRlKHZhbCkge1xyXG4gICAgICAgIGlmICh2YWwpIHtcclxuICAgICAgICAgICAgdGhpcy53cmFwcGVkVXBkYXRlT3JDcmVhdGVDaGFydCgpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNoYW5nZS5lbWl0KGZhbHNlKTsgLy8gY2xlYXIgdGhlIGZsYWcgYWZ0ZXIgdXBkYXRlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHs/fVxyXG4gICAgICovXHJcbiAgICB3cmFwcGVkVXBkYXRlT3JDcmVhdGVDaGFydCgpIHtcclxuICAgICAgICAvLyAjNzVcclxuICAgICAgICBpZiAodGhpcy5ydW5PdXRzaWRlQW5ndWxhcikge1xyXG4gICAgICAgICAgICB0aGlzLl96b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlT3JDcmVhdGVDaGFydCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlT3JDcmVhdGVDaGFydCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7P31cclxuICAgICAqL1xyXG4gICAgdXBkYXRlT3JDcmVhdGVDaGFydCgpIHtcclxuICAgICAgICBpZiAodGhpcy5jaGFydCAmJiB0aGlzLmNoYXJ0LnVwZGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJ0LnVwZGF0ZSh0aGlzLm9wdGlvbnNWYWx1ZSwgdHJ1ZSwgdGhpcy5vbmVUb09uZSB8fCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJ0ID0gKC8qKiBAdHlwZSB7P30gKi8gKHRoaXMuSGlnaGNoYXJ0cykpW3RoaXMuY29uc3RydWN0b3JUeXBlIHx8ICdjaGFydCddKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgdGhpcy5vcHRpb25zVmFsdWUsIHRoaXMuY2FsbGJhY2tGdW5jdGlvbiB8fCBudWxsKTtcclxuICAgICAgICAgICAgLy8gZW1pdCBjaGFydCBpbnN0YW5jZSBvbiBpbml0XHJcbiAgICAgICAgICAgIHRoaXMuY2hhcnRJbnN0YW5jZS5lbWl0KHRoaXMuY2hhcnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7P31cclxuICAgICAqL1xyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgLy8gIzQ0XHJcbiAgICAgICAgaWYgKHRoaXMuY2hhcnQpIHsgLy8gIzU2XHJcbiAgICAgICAgICAgIC8vICM1NlxyXG4gICAgICAgICAgICB0aGlzLmNoYXJ0LmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgdGhpcy5jaGFydCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbkhpZ2hjaGFydHNDaGFydENvbXBvbmVudC5kZWNvcmF0b3JzID0gW1xyXG4gICAgeyB0eXBlOiBDb21wb25lbnQsIGFyZ3M6IFt7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2hpZ2hjaGFydHMtY2hhcnQnLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6ICcnXHJcbiAgICAgICAgICAgIH1dIH1cclxuXTtcclxuLyoqIEBub2NvbGxhcHNlICovXHJcbkhpZ2hjaGFydHNDaGFydENvbXBvbmVudC5jdG9yUGFyYW1ldGVycyA9ICgpID0+IFtcclxuICAgIHsgdHlwZTogRWxlbWVudFJlZiwgfSxcclxuICAgIHsgdHlwZTogTmdab25lLCB9LFxyXG5dO1xyXG5IaWdoY2hhcnRzQ2hhcnRDb21wb25lbnQucHJvcERlY29yYXRvcnMgPSB7XHJcbiAgICBcIkhpZ2hjaGFydHNcIjogW3sgdHlwZTogSW5wdXQgfSxdLFxyXG4gICAgXCJjb25zdHJ1Y3RvclR5cGVcIjogW3sgdHlwZTogSW5wdXQgfSxdLFxyXG4gICAgXCJjYWxsYmFja0Z1bmN0aW9uXCI6IFt7IHR5cGU6IElucHV0IH0sXSxcclxuICAgIFwib25lVG9PbmVcIjogW3sgdHlwZTogSW5wdXQgfSxdLFxyXG4gICAgXCJydW5PdXRzaWRlQW5ndWxhclwiOiBbeyB0eXBlOiBJbnB1dCB9LF0sXHJcbiAgICBcIm9wdGlvbnNcIjogW3sgdHlwZTogSW5wdXQgfSxdLFxyXG4gICAgXCJ1cGRhdGVcIjogW3sgdHlwZTogSW5wdXQgfSxdLFxyXG4gICAgXCJ1cGRhdGVDaGFuZ2VcIjogW3sgdHlwZTogT3V0cHV0IH0sXSxcclxuICAgIFwiY2hhcnRJbnN0YW5jZVwiOiBbeyB0eXBlOiBPdXRwdXQgfSxdLFxyXG59O1xuXG4vKipcclxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXHJcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcclxuICovXHJcbmNsYXNzIEhpZ2hjaGFydHNDaGFydE1vZHVsZSB7XHJcbn1cclxuSGlnaGNoYXJ0c0NoYXJ0TW9kdWxlLmRlY29yYXRvcnMgPSBbXHJcbiAgICB7IHR5cGU6IE5nTW9kdWxlLCBhcmdzOiBbe1xyXG4gICAgICAgICAgICAgICAgZGVjbGFyYXRpb25zOiBbSGlnaGNoYXJ0c0NoYXJ0Q29tcG9uZW50XSxcclxuICAgICAgICAgICAgICAgIGV4cG9ydHM6IFtIaWdoY2hhcnRzQ2hhcnRDb21wb25lbnRdXHJcbiAgICAgICAgICAgIH0sXSB9XHJcbl07XHJcbi8qKiBAbm9jb2xsYXBzZSAqL1xyXG5IaWdoY2hhcnRzQ2hhcnRNb2R1bGUuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXTtcblxuLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxyXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXHJcbiAqL1xuXG4vKipcclxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXHJcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcclxuICovXG5cbmV4cG9ydCB7IEhpZ2hjaGFydHNDaGFydE1vZHVsZSwgSGlnaGNoYXJ0c0NoYXJ0Q29tcG9uZW50IH07XG4iXX0=